app.js




// import React from 'react';
// import Home from './pages/User/HomePage'
// import {BrowserRouter as Router,Routes,Route} from 'react-router-dom'
// import LoginPage from './pages/User/LoginPage';
// import RegisterFormPage from './pages/User/RegisterFormPage';
// import ResetPass1 from './pages/User/ResetPassPage1'
// import OtpPage from './components/User/OtpPage';
// import 'react-toastify/dist/ReactToastify.css';
// import { ToastContainer } from 'react-toastify';
// import VendorDashboard from './pages/Vendor/HomePage'
// import VendorLoginPage from './pages/Vendor/LoginPage'
// import axios from './axios';
// import { useSelector, useDispatch } from 'react-redux';
// import { useEffect } from 'react';
// import ResetPass2 from './pages/User/ResetPassPage2'
// import VendorLogin from './pages/Vendor/LoginPage'
// import VendorRegister from './pages/Vendor/RegisterPage'
// import VendorOtpPage from './components/Vendor/OtpPage';
// import AdminLogin from './pages/Admin/LoginPage'
// import AdminDashboard from './pages/Admin/DashboardPage';
// import VendorList from './pages/Admin/VendorManagmentPage'
// import UserManagmentPage from './pages/Admin/UserManagmentPage';
// // import VerifRestOtp from './pages/User/ResetPassPage2'
// import Newpassword from './components/User/NewPassword'; 
// import VendorProfile from './pages/Vendor/ProfilePage' ;
// import AddCarPage from './pages/Vendor/AddCarPage';
// import EditProfile from './pages/Vendor/editProfilePage';
// import CarListPage from './pages/Vendor/VendorCarlistpage'
// import Carmanagment from './pages/Admin/carManagmentPage'
// function App() {
//   const { user,vendor,admin,refresh} = useSelector((state) => state);
//   axios.defaults.withCredentials = true;
//   const dispatch = useDispatch();

//   useEffect(() => {
//     axios.get('/auth/').then((response) => {
//       console.log("USER:", response.data);
//       dispatch({ type: 'user', payload: { login: response.data.logged, details: response.data.details } });
//     }); 
//     axios.get('/vendor/auth').then((response) => {
//       console.log("VENDOR: ", response.data);
//       dispatch({ type: 'vendor', payload: { vendorLog: response.data.logged, details: response.data.details } });
//     });
//     axios.get('/admin/auth').then((response) => {
//       console.log("ADMIN: ", response.data);
//       dispatch({ type: 'admin', payload: { adminLog: response.data.logged, details: response.data.details } });
//     });
//   }, [refresh, dispatch]);
//   return (
//     <div className="App">
// <Router>
//   <Routes>
// <Route exact path="/" element={<Home/>} />
// <Route exact path="/login" element={<LoginPage/>} />
// <Route exact path="/register" element={<RegisterFormPage/>} />
// <Route exact path="/otp" element={<OtpPage/>} />
// <Route exact path="/resetpassword" element={<ResetPass1/>} />
// <Route exact path='/resetpassotp' element={<ResetPass2/>} />
// {/* <Router exact path='/verify-otp' element={<VerifRestOtp/>}/> */}
// <Route exact path="/vendor" element={<VendorLogin/>} />
// <Route exact path="/vendor/login" element={<VendorLoginPage/>} />
// <Route exact path="/vendor/register" element={<VendorRegister/>} />
// <Route exact path="/vendor/otp" element={<VendorOtpPage/>} />
// <Route exact path='/vendor/vendorhome' element={<VendorDashboard/>} />
// <Route exact path='/SetNewPassword' element={<Newpassword/>} />
// <Route exact path="/admin" element={<AdminLogin/>} />
// <Route exact path="/admin/home" element={<AdminDashboard/>} />
// <Route exact path="/admin/usermanagment" element={<UserManagmentPage/>} />
// <Route exact path="/admin/vendormanagment" element={<VendorList/>} />
// <Route exact path="/vendor/vendorprofile" element={<VendorProfile/>} />
// <Route exact path="/vendor/addcar" element={<AddCarPage/>} />
// <Route exact path="/vendor/editprofile" element={<EditProfile/>} />
// <Route exact path="/vendor/carlist" element={<CarListPage/>} />
// <Route exact path="/admin/carManagment" element={<Carmanagment/>} />

// </Routes>
// <ToastContainer />

// </Router>
      
      
//     </div>
//   );
// }

// export default App;






add documrnet



// import React, { useState } from 'react';
// import { useDispatch ,useSelector} from 'react-redux';
// import { useNavigate } from 'react-router-dom';
// import { toast } from 'react-toastify';
// import axios from '../../axios';

// const AddDocumentPage = () => {
//   axios.defaults.withCredentials = true;
//   const navigate = useNavigate();
//   const dispatch = useDispatch();
//   const user = useSelector(state => state.user.details);
//   const userId=user._id;
// console.log(user,'..................');
//   const [drivingLicense, setDrivingLicense] = useState([]);
//   const [aadharCard, setAadharCard] = useState([]);

//   const handleDrivingLicenseChange = (e) => {
//     const img = e.target.files;
//     setDrivingLicense([...img]);
//   };

//   const handleAadharCardChange = (e) => {
//     const img = e.target.files;
//     setAadharCard([...img]);
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     const formData = new FormData();
//     if (drivingLicense) {
//       drivingLicense.forEach((item)=>{

//         formData.append('drivingLicense', drivingLicense);
//       })
//     }
//     if (aadharCard) {
//       aadharCard.forEach((item)=>{

//         formData.append('aadharCard', aadharCard);
//       })
//     }
//     formData.append('userId',userId)
    
//     try {
//       const response = await axios.post('/uploadDocuments', formData, {
//         headers: {
//           'Content-Type': 'multipart/form-data',
//         },
//       });
//       if (!response.data.err) {
//         dispatch({ type: 'refresh' });
//         console.log('2222222222222222222',response.data);
//         return navigate('/userprofile');
//       }
//     } catch (error) {
//       if (error.response) {
//         const errorMessage = error.response.data.message;
//         toast.error(errorMessage, {
//           position: 'top-center',
//         });
//       } else {
//         toast.error('An error occurred. Please try again later.', {
//           position: 'top-center',
//         });
//       }
//     }
//   };

//   return (
//     <div className="min-h-screen bg-gray-100 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
//       <div className="sm:mx-auto sm:w-full sm:max-w-md">
//         <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">Add Documents</h2>
//       </div>
//       <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
//         <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
//           <form className="space-y-6" onSubmit={handleSubmit}>
//             <div className="mb-4">
//               <label htmlFor="drivingLicense" className="text-gray-700 font-medium">
//                 Driving License:
//               </label>
//               <input
//                 type="file"
//                 id="drivingLicense"
//                 name='drivingLicense'
//                 accept="image/*"
//                 multiple
//                 required
//                 onChange={handleDrivingLicenseChange}
//                 className="mt-1"
//               />
//             </div>
//             <div className="mb-4">
//               <label htmlFor="aadharCard" className="text-gray-700 font-medium">
//                 Aadhaar Card:
//               </label>
//               <input
//                 type="file"
//                 id="aadharCard"
//                 name='aadharCard'
//                 accept="image/*"
//                 multiple
//                 required
//                 onChange={handleAadharCardChange}
//                 className="mt-1"
//               />
//             </div>
//             <div className="flex justify-center">
//               <button
//                 type="submit"
//                 className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
//               >
//                 Upload
//               </button>
//             </div>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default AddDocumentPage;













// import React from 'react';
// import { useSelector } from 'react-redux';
// import { Link } from 'react-router-dom';

// const ProfilePage = () => {
//   const user = useSelector(state => state.user.details);

//   return (
//     if(user){
//     <div className="flex min-h-screen mt-2">
//       <div className="lg:w-1/3 p-8 bg-gray-100 flex flex-col justify-center">
//         <div className="text-center">
//           {/* User details */}
//           <p><strong>Name:</strong> {user.name}</p>
//           <p><strong>Email:</strong> {user.email}</p>
//           <p><strong>Phone Number:</strong> {user.phoneNumber}</p>
//           <Link to='/adddocuments'>
//           <button className="mt-2 px-4 py-2 bg-blue-500 text-white rounded-md">Add Document</button>
//           </Link>
//           <Link to='/edituserProfile'>
//           <button className="mt-2 px-4 py-2 bg-gray-500 text-white rounded-md ml-2">Edit</button>
//           </Link>
//         </div>
//       </div>
//       <div className="w-full lg:w-2/3 p-8">
//         <h2 className="text-2xl font-bold">Documents</h2>
//         <table className="w-full mt-4">
//           <thead>
//             <tr>
//               <th className="px-4 py-2 bg-gray-200">Document Name</th>
//               <th className="px-4 py-2 bg-gray-200">Category</th>
//               <th className="px-4 py-2 bg-gray-200">Status</th>
//             </tr>
//           </thead>
//           <tbody>
//             <tr>
//               <td className="px-4 py-2">Document 1</td>
//               <td className="px-4 py-2">Category 1</td>
//               <td className="px-4 py-2">Approved</td>
//             </tr>
//             <tr>
//               <td className="px-4 py-2">Document 2</td>
//               <td className="px-4 py-2">Category 2</td>
//               <td className="px-4 py-2">Pending</td>
//             </tr>
//             {/* Add more rows as needed */}
//           </tbody>
//         </table>
//       </div>
//     </div>
//     }
//   );
// }

// export default ProfilePage;










// import React from 'react';
// import { useSelector } from 'react-redux';

// const ProfilePage = () => {
//   const {user}=useSelector(state=>state.user)
//   console.log(user,'0000000000000000000000000000000000000');
//   return (
//     <div className="flex min-h-screen mt-2">
//       <div className=" lg:w-1/3 p-8 bg-gray-100 flex flex-col justify-center">
        
//         <div className="text-center">
//           {/* User details */}
//           <p><strong>Name:</strong> John Doe</p>
//           <p><strong>Email:</strong> john@example.com</p>
//           <p><strong>Location:</strong> New York, USA</p>
//           <button className="mt-2 px-4 py-2 bg-blue-500 text-white rounded-md">Add Document</button>
//           <button className="mt-2 px-4 py-2 bg-gray-500 text-white rounded-md ml-2">Edit</button>
//         </div>
//       </div>
//       <div className="w-full lg:w-2/3 p-8">
//         <h2 className="text-2xl font-bold">Documents</h2>
//         <table className="w-full mt-4">
//           <thead>
//             <tr>
//               <th className="px-4 py-2 bg-gray-200">Document Name</th>
//               <th className="px-4 py-2 bg-gray-200">Category</th>
//               <th className="px-4 py-2 bg-gray-200">Status</th>
//             </tr>
//           </thead>
//           <tbody>
//             <tr>
//               <td className="px-4 py-2">Document 1</td>
//               <td className="px-4 py-2">Category 1</td>
//               <td className="px-4 py-2">Approved</td>
//             </tr>
//             <tr>
//               <td className="px-4 py-2">Document 2</td>
//               <td className="px-4 py-2">Category 2</td>
//               <td className="px-4 py-2">Pending</td>
//             </tr>
//             {/* Add more rows as needed */}
//           </tbody>
//         </table>
//       </div>
//     </div>
//   );
// }

// export default ProfilePage;





















<div className="pagination flex justify-center mt-4">
  {currentPage > 1 && (
    <button
      onClick={() => handlePageChange(currentPage - 1)}
      className="pagination-button px-2 py-1 mx-1 rounded bg-white text-gray-800"
    >
      <svg
        className="w-4 h-4 fill-current"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 20 20"
        fill="currentColor"
      >
        <path
          fillRule="evenodd"
          d="M10.707 14.707a1 1 0 0 1-1.414 0l-4-4a1 1 0 0 1 0-1.414l4-4a1 1 0 1 1 1.414 1.414L7.414 9H16a1 1 0 0 1 0 2H7.414l3.293 3.293a1 1 0 0 1 0 1.414z"
          clipRule="evenodd"
        />
      </svg>
    </button>
  )}
  {pageNumbers.map((pageNumber) => (
    <button
      key={pageNumber}
      onClick={() => handlePageChange(pageNumber)}
      className={`pagination-button px-2 py-1 mx-1 rounded ${
        currentPage === pageNumber ? "bg-blue-500 text-white" : "bg-white text-gray-800"
      }`}
    >
      {pageNumber}
    </button>
  ))}
  {currentPage < totalPages && (
    <button
      onClick={() => handlePageChange(currentPage + 1)}
      className="pagination-button px-2 py-1 mx-1 rounded bg-white text-gray-800"
    >
      <svg
        className="w-4 h-4 fill-current"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 20 20"
        fill="currentColor"
      >
        <path
          fillRule="evenodd"
          d="M9.293 5.293a1 1 0 0 1 1.414 0l4 4a1 1 0 0 1 0 1.414l-4 4a1 1 0 0 1-1.414-1.414L12.586 11H4a1 1 0 0 1 0-2h8.586l-3.293-3.293a1 1 0 0 1 0-1.414z"
          clipRule="evenodd"
        />
      </svg>
    </button>
  )}
</div>







// import React, { useEffect, useState } from 'react';
// import { FaCar, FaCog, FaGasPump } from 'react-icons/fa';
// import axios from '../../axios';

// const Card = () => {

//     const [cars, setCars] = useState([])
//     const fetchCars = async () => {
//         try {
//             const response = await axios.get('/getcars');
//             console.log('+++++++++++++++++++++++++++++++++++++++', response);
//             if (!response.data.err) {
//                 setCars(response.data)
//                 console.log(response.data, "12346");
//             }
//         } catch (error) {
//             console.log(error);
//         }
//     }
//     useEffect(() => {
//         fetchCars()
//     }, []);
//     console.log(cars, "cars");
//     return (

//         <>
//             {cars.map((car, index) => (
//                 <div className="flex flex-col items-center max-w-xs bg-white shadow-md rounded-lg overflow-hidden">

//                     <img src={`http://localhost:5000/images/${car.carImages[0].filename}`} alt={`Car Image `} className="object-cover w-full h-40" />

//                     <div className="flex flex-col items-center p-4">
//                         <h2 className="text-lg font-semibold text-center">{car.model}</h2>
//                         <p className="mt-2">{car.rentPerDay}/Days</p>
//                         <div className="flex items-center mt-4">
//                             <div className="flex items-center mr-2">
//                                 <FaCar className="mr-1" />
//                                 <p className="mt-1 text-sm">Model-{car.year}</p>
//                             </div>
//                             <div className="flex items-center mr-2">
//                                 <FaCog className="mx-1" />
//                                 <p className="mt-1 text-sm">{car.specifications}</p>
//                             </div>
//                             <div className="flex items-center">
//                                 <FaGasPump className="mx-1" />
//                                 <p className="mt-1 text-sm">{car.mileage} kmpl</p>
//                             </div>
//                         </div>
//                         <div className="mt-4 flex space-x-2">
//                             <button className="px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white rounded">
//                                 Book Now
//                             </button>
//                             <button className="px-3 py-1 bg-gray-500 hover:bg-gray-600 text-white rounded">
//                                 Details
//                             </button>
//                         </div>
//                     </div>
//                 </div>

//             ))}
//         </>
//     );
// };

// export default Card;
// import React, { useEffect, useState } from 'react';
// import { FaCar, FaCog, FaGasPump } from 'react-icons/fa';
// import axios from '../../axios';

// const Card = () => {
//   const [cars, setCars] = useState([]);
//   const fetchCars = async () => {
//     try {
//       const response = await axios.get('/getcars');
//       if (!response.data.err) {
//         setCars(response.data);
//       }
//     } catch (error) {
//       console.log(error);
//     }
//   };

//   useEffect(() => {
//     fetchCars();
//   }, []);

//   return (
//     <div className="flex flex-wrap justify-center mt-10">
//       {cars.map((car, index) => (
//         <div
//           key={index}
//           className="flex flex-col items-center max-w-xs bg-white shadow-md rounded-lg overflow-hidden mx-4 my-4"
//         >
//           <img
//             src={`http://localhost:5000/images/${car.carImages[0].filename}`}
//             alt={`carImage`}
//             className="object-cover w-full h-40"
//           />
//           <div className="flex flex-col items-center p-4">
//             <h2 className="text-lg font-semibold text-center">{car.model}</h2>
//             <p className="mt-2">{car.rentPerDay} / Days</p>
//             <div className="flex items-center mt-4">
//               <div className="flex items-center mr-2">
//                 <FaCar className="mr-1" />
//                 <p className="mt-1 text-sm">Model-{car.year}</p>
//               </div>
//               <div className="flex items-center mr-2">
//                 <FaCog className="mx-1" />
//                 <p className="mt-1 text-sm">{car.specifications}</p>
//               </div>
//               <div className="flex items-center">
//                 <FaGasPump className="mx-1" />
//                 <p className="mt-1 text-sm">{car.mileage} kmpl</p>
//               </div>
//             </div>
//             <div className="mt-4 flex space-x-2">
//               <button className="px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white rounded">
//                 Book Now
//               </button>
//               <button className="px-3 py-1 bg-gray-500 hover:bg-gray-600 text-white rounded">
//                 Details
//               </button>
//             </div>
//           </div>
//         </div>
//       ))}
//     </div>
//   );
// };

// export default Card;




import React, { useState } from 'react'
import axios from '../../axios'
import {  useNavigate } from 'react-router-dom'
import { useDispatch} from 'react-redux';
import { toast } from 'react-toastify';
const RegisterForm = () => {
    axios.defaults.withCredentials = true;
const navigate = useNavigate();
const dispatch=useDispatch();


const [name, setName] = useState('')
const [email, setEmail] = useState('')
const [password, setPassword] = useState('')
const [confirmPassword,setConfirmPassword]=useState('')
const [phoneNumber,setPhoneNumber]=useState('')
// const [err, setErr] = useState(null)
const handleSubmit=(e)=>{
  e.preventDefault();
  if(name.trim()&& phoneNumber.trim()&& email.trim()&&password.trim()){
    axios.post('/vendor/signup',{name,email,phoneNumber,password,confirmPassword}).then((response)=>{
        console.log("*******************************",response.data);
    if(!response.data.err){ 
      dispatch({type:'refresh'})
      console.log(response.data);
      const data={
        name:name,
        email:email,
        phoneNumber:phoneNumber,
        password:password
      }

     return navigate('/vendor/otp',{state:{data}})
    }else{
     
      // setErr(response.data.message)
      toast.error(response.data.message, {
        position :"top-center"
      });
    }
    })
  }else{
    // setErr("All fields are required")
    
    toast.error('All Fields are Required', {
      position :"top-center"
      
    });
  }
}
  return (
    <div className="min-h-screen bg-gray-100 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Vendor Registeration
        </h2>
      </div>
      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          <form className="space-y-6" action="#" method="POST" onSubmit={handleSubmit}>
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                Name
              </label>
              <div className="mt-1">
                <input
                  id="name"
                  name="name"
                  type="text"
                  required
                  value={name}
                  className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                  onChange={e=>setName(e.target.value)}
                />
              </div>
            </div>
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email address
              </label>
              <div className="mt-1">
                <input
                  id="email"
                  name="email"
                  type="email"
                  required
                  value={email}
                  className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                  onChange={e=>setEmail(e.target.value)}
               />
              </div>
            </div>
            <div>
  <label htmlFor="phone" className="block text-sm font-medium text-gray-700">
    Phone number
  </label>
  <div className="mt-1">
    <input
      id="phone"
      name="phoneNumber"
      type="text"
      required
      value={phoneNumber}
      className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
      onChange={e => setPhoneNumber(e.target.value)}
    />
  </div>
</div>

            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <div className="mt-1">
                <input
                  id="password"
                  name="password"
                  type="password"
                  required
                  value={password}
                  className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                  onChange={e=>setPassword(e.target.value)}
               />
              </div>
            </div>
            <div>
              <label htmlFor="confirmpassword" className="block text-sm font-medium text-gray-700">
                Confirm Password
              </label>
              <div className="mt-1">
                <input
                  id="confirmpassword"
                  name="confirmpassword"
                  type="password"
                  required
                  value={confirmPassword}
                  className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                  onChange={e=>setConfirmPassword(e.target.value)}
                />
              </div>
            </div>
            <div>
          
           <button
                type="submit"
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              >
                Register
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default RegisterForm;














// export const vendorLogin=async(req,res)=>{
  //     try {
  //       let {email,password}=req.body;
  //       console.log("/////////////////////",req.body);
  //       let vendor=await vendorModel.findOne({email:email})
  //       if(vendor ){
  //         if(vendor.ban==false){
  //             let status= await bcrypt.compare(password,vendor.password)
  //             if(status){
  //                 const vendorToken=jwt.sign({
  //                     id:vendor._id
  //                 },"00f3f20c9fc43a29d4c9b6b3c2a3e18918f0b23a379c152b577ceda3256f3ffa");
  //                 return res.cookie("vendorToken", vendorToken, {
  //                     httpOnly: true,
  //                     secure: true,
  //                     maxAge: 1000 * 60 * 60 * 24 * 7,
  //                     sameSite: "none",
  //                 }).json({ err: false ,message:'vendor login success',vendor}); 
  //             }else{
  //                 res.json({err:true,message:"Invalid email or password"})
  //             }
  //         }else{
  //             res.json({err:true,message:'vendor banned.'})
  //         }
  //       }else{
  //           res.json({err:true,message:'No vendor found, please signup.'})
  //       }
  //     } catch (error) {
  //       console.log(error);
  //     }
  //   }





// import React, { useState } from 'react';

// const CarRegistrationPage = () => {
 

//   return (
//     <div className="min-h-screen bg-gray-100 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
//       <div className="sm:mx-auto sm:w-full sm:max-w-md">
//         <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">Car Registration</h2>
//       </div>
//       <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
//         <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
//           <form className="space-y-6">
//              {/* Car Make */}
//             <div>
//               <label htmlFor="carMake" className="block text-sm font-medium text-gray-700">
//               Car Model               </label>
//               <div className="mt-1">
//               <input
//                   id="carMake"
//                   name="carMake"
//                   type="text"
//                   autoComplete="car-make"
//                   required
//                   className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
//                 />
//               </div>
//             </div>
//             {/* Car Year */}
//             <div>
//               <label htmlFor="carYear" className="block text-sm font-medium text-gray-700">
//                 Car Year
//               </label>
//               <div className="mt-1">
//                 <input
//                   id="carYear"
//                   name="carYear"
//                   type="number"
//                   autoComplete="car-year"
//                   required
//                   className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
//                 />
//               </div>
//             </div>
//             {/* Car Mileage */}
//             <div>
//               <label htmlFor="carMileage" className="block text-sm font-medium text-gray-700">
//                 Car Mileage
//               </label>
//               <div className="mt-1">
//                 <input
//                   id="carMileage"
//                   name="carMileage"
//                   type="number"
//                   autoComplete="car-mileage"
//                   required
//                   className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
//                 />
//               </div>
//             </div>

            
//             <div>
//               <label htmlFor="fuelType" className="block text-sm font-medium text-gray-700">
//                 Type of Fuel
//               </label>
              
//               <select >
//         <option value="">Select a value</option>
//         <option value="1">Option 1</option>
//         <option value="2">Option 2</option>
//         <option value="3">Option 3</option>
//       </select>
//             </div>

//             {/* Transmission Mode */}
//             <div>
//               <label htmlFor="fuelType" className="block text-sm font-medium text-gray-700">
//               Transmission Mode
//               </label>
//               <select >
//         <option value="">Select a value</option>
//         <option value="1">Option 1</option>
//         <option value="2">Option 2</option>
//         <option value="3">Option 3</option>
//       </select>
//             </div>
             
//             {/* Specifications */}
//             <div>
//               <label htmlFor="fuelType" className="block text-sm font-medium text-gray-700">
//               Specifications
//               </label>
//               <select>
//         <option value="">Select a value</option>
//         <option value="1">Option 1</option>
//         <option value="2">Option 2</option>
//         <option value="3">Option 3</option>
//       </select>
//             </div>
            
//              {/* Rent Per Day */}
//              <div>
//               <label htmlFor="rentPerDay" className="block text-sm font-medium text-gray-700">
//                 Rent Per Day
//               </label>
//               <div className="mt-1">
//                 <input
//                   id="rentPerDay"
//                   name="rentPerDay"
//                   type="number"
//                   autoComplete="rent-per-day"
//                   required
//                   className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
//                 />
//               </div>
//             </div>
//             {/* RC Image */}
//             <div>
//               <label htmlFor="rcImage" className="block text-sm font-medium text-gray-700">
//                 RC Image
//               </label>
//               <div className="mt-1">
//                 <input
//                   id="rcImage"
//                   name="rcImage"
//                   type="file"
//                   accept="image/*"
//                   required
//                   className="appearance-none block w-full py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
//                 />
//               </div>
//             </div>
//             {/* Images */}
//             <div>
//               <label htmlFor="carImages" className="block text-sm font-medium text-gray-700">
//                 Car Images
//               </label>
//               <div className="mt-1">
//                 <input
//                   id="carImages"
//                   name="carImages"
//                   type="file"
//                   accept="image/*"
//                   multiple
//                   required
//                   className="appearance-none block w-full py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
//                 />
//               </div>
//             </div>
           
//                      {/* Submit Button */}
//              <div>
//                <button
//                 type="submit"
//                 className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
//               >
//                 Register Car
//               </button>
//             </div>
//           </form>
          
//         </div>
//       </div>
//     </div>
//   );
// };

// export default CarRegistrationPage;




























// import React, { useState } from 'react'
// import axios from '../../axios'
// import {  useNavigate } from 'react-router-dom'
// import { useDispatch} from 'react-redux';
// import { toast } from 'react-toastify';
// const RegisterForm = () => {
//     axios.defaults.withCredentials = true;
// const navigate = useNavigate();
// const dispatch=useDispatch();


// const [name, setName] = useState('')
// const [email, setEmail] = useState('')
// const [password, setPassword] = useState('')
// const [confirmPassword,setConfirmPassword]=useState('')
// // const [err, setErr] = useState(null)
// const handleSubmit=(e)=>{
//   e.preventDefault();
//   if(name.trim()&& email.trim()&&password.trim()){
//     axios.post('/signup',{name,email,password,confirmPassword}).then((response)=>{
//         console.log("*******************************",response.data);
//     if(!response.data.err){
//       dispatch({type:'refresh'})
//       console.log(response.data);
//       const data={
//         name:name,
//         email:email,
//         password:password
//       }

//      return navigate('/otp',{state:{data}})
//     }else{

//       // setErr(response.data.message)
//       toast.error(response.data.message, {
//         position :"top-center"
//       });
//     }
//     })
//   }else{
//     // setErr("All fields are required")

//     toast.error('All Fields are Required', {
//       position :"top-center"

//     });
//   }
// }
//   return (
//     <div className="min-h-screen bg-gray-100 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
//       <div className="sm:mx-auto sm:w-full sm:max-w-md">
//         <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
//           Register
//         </h2>
//       </div>
//       <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
//         <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
//           <form className="space-y-6" action="#" method="POST" onSubmit={handleSubmit}>
//             <div>
//               <label htmlFor="name" className="block text-sm font-medium text-gray-700">
//                 Name
//               </label>
//               <div className="mt-1">
//                 <input
//                   id="name"
//                   name="name"
//                   type="text"
//                   required
//                   value={name}
//                   className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
//                   onChange={e=>setName(e.target.value)}
//                 />
//               </div>
//             </div>
//             <div>
//               <label htmlFor="email" className="block text-sm font-medium text-gray-700">
//                 Email address
//               </label>
//               <div className="mt-1">
//                 <input
//                   id="email"
//                   name="email"
//                   type="email"
//                   required
//                   value={email}
//                   className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
//                   onChange={e=>setEmail(e.target.value)}
//                />
//               </div>
//             </div>
//             <div>
//               <label htmlFor="password" className="block text-sm font-medium text-gray-700">
//                 Password
//               </label>
//               <div className="mt-1">
//                 <input
//                   id="password"
//                   name="password"
//                   type="password"
//                   required
//                   value={password}
//                   className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
//                   onChange={e=>setPassword(e.target.value)}
//                />
//               </div>
//             </div>
//             <div>
//               <label htmlFor="confirmpassword" className="block text-sm font-medium text-gray-700">
//                 Confirm Password
//               </label>
//               <div className="mt-1">
//                 <input
//                   id="confirmpassword"
//                   name="confirmpassword"
//                   type="password"
//                   required
//                   value={confirmPassword}
//                   className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
//                   onChange={e=>setConfirmPassword(e.target.value)}
//                 />
//               </div>
//             </div>
//             <div>

//            <button
//                 type="submit"
//                 className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
//               >
//                 Register
//               </button>
//             </div>
//           </form>
//         </div>
//       </div>
//     </div>
//   );
// };




// export default RegisterForm;
// import React from 'react';
// import { Formik, Form, Field, ErrorMessage } from 'formik';
// import axios from '../../axios';
// import { useNavigate } from 'react-router-dom';
// import { useDispatch } from 'react-redux';
// import { toast } from 'react-toastify';

// const RegisterForm = () => {
//   axios.defaults.withCredentials = true;
//   const navigate = useNavigate();
//   const dispatch = useDispatch();

//   const handleSubmit = (values) => {
//     axios
//       .post('/signup', values)
//       .then((response) => {
//         console.log("*******************************", response.data);
//         if (!response.data.err) {
//           dispatch({ type: 'refresh' });
//           console.log(response.data);
//           const data = {
//             name: values.name,
//             email: values.email,
//             password: values.password
//           };

//           return navigate('/otp', { state: { data } });
//         } else {
//           toast.error(response.data.message, {
//             position: "top-center"
//           });
//         }
//       })
//       .catch((error) => {
//         toast.error('An error occurred', {
//           position: "top-center"
//         });
//       });
//   };

//   return (
//     <div className="min-h-screen bg-gray-100 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
//       <div className="sm:mx-auto sm:w-full sm:max-w-md">
//         <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
//           Register
//         </h2>
//       </div>
//       <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
//         <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
//           <Formik
//             initialValues={{
//               name: '',
//               email: '',
//               password: '',
//               confirmPassword: ''
//             }}
//             validate={(values) => {
//               const errors = {};

//               if (!values.name) {
//                 errors.name = 'Required';
//               }

//               if (!values.email) {
//                 errors.email = 'Required';
//               } else if (!/\S+@\S+\.\S+/.test(values.email)) {
//                 errors.email = 'Invalid email address';
//               }

//               if (!values.password) {
//                 errors.password = 'Required';
//               } else if (values.password.length < 6) {
//                 errors.password = 'Password must be at least 6 characters';
//               }

//               if (!values.confirmPassword) {
//                 errors.confirmPassword = 'Required';
//               } else if (values.confirmPassword !== values.password) {
//                 errors.confirmPassword = 'Passwords do not match';
//               }

//               return errors;
//             }}
//             onSubmit={handleSubmit}
//           >
//             <Form className="space-y-6">
//               <div>
//                 <label htmlFor="name" className="block text-sm font-medium text-gray-700">
//                   Name
//                 </label>
//                 <div className="mt-1">
//                   <Field
//                     id="name"
//                     name="name"
//                     type="text"
//                     className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
//                   />
//                   <ErrorMessage name="name" component="div" className="text-red-500" />
//                 </div>
//               </div>
//               <div>
//                 <label htmlFor="email" className="block text-sm font-medium text-gray-700">
//                   Email address
//                 </label>
//                 <div className="mt-1">
//                   <Field
//                     id="email"
//                     name="email"
//                     type="email"
//                     className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
//                   />
//                   <ErrorMessage name="email" component="div" className="text-red-500" />
//                 </div>
//               </div>
//               <div>
//                 <label htmlFor="password" className="block text-sm font-medium text-gray-700">
//                   Password
//                 </label>
//                 <div className="mt-1">
//                   <Field
//                     id="password"
//                     name="password"
//                     type="password"
//                     className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
//                   />
//                   <ErrorMessage name="password" component="div" className="text-red-500" />
//                 </div>
//               </div>
//               <div>
//                 <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
//                   Confirm Password
//                 </label>
//                 <div className="mt-1">
//                   <Field
//                     id="confirmPassword"
//                     name="confirmPassword"
//                     type="password"
//                     className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
//                   />
//                   <ErrorMessage name="confirmPassword" component="div" className="text-red-500" />
//                 </div>
//               </div>
//               <div>
//                 <button
//                   type="submit"
//                   className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
//                 >
//                   Register
//                 </button>
//               </div>
//             </Form>
//           </Formik>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default RegisterForm;
















ProfilePageimport React from 'react';

const ProfilePage = () => {
  return (
    <div className="min-h-screen bg-gray-100 flex">
      {/* Left side - Vendor details and options */}
      <div className="w-1/4 bg-white rounded-lg shadow-lg overflow-hidden p-8">
        <div>
          {/* Profile picture */}
          <div className="mb-8">
            <img
              className="h-48 w-full object-cover"
              src="profile-picture.jpg"
              alt="Profile Picture"
            />
          </div>
          {/* Vendor information */}
          <div className="mb-8">
            <div className="uppercase tracking-wide text-sm text-indigo-500 font-semibold">Vendor</div>
            {/* Name */}
            <h2 className="block mt-1 text-lg leading-tight font-medium text-black">John Doe</h2>
            {/* Email */}
            <p className="mt-2 text-gray-500">johndoe@example.com</p>
            {/* Biography */}
            <p className="mt-2 text-gray-600">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus ut tempus ex, eget congue enim. Fusce ut mauris nec dui lobortis rhoncus id ac risus.</p>
          </div>
          {/* Buttons */}
          <div className="flex flex-col">
            {/* Add Car Option */}
            <button
              type="button"
              className="my-2 inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Add Car Option
            </button>
            {/* Edit Profile */}
            <button
              type="button"
              className="my-2 inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-yellow-500 hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-400"
            >
              Edit Profile
            </button>
            {/* Logout */}
            <button
              type="button"
              className="my-2 inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              Logout
            </button>
          </div>
        </div>
      </div>

      {/* Right side - List of added car details */}
      <div className="w-3/4 bg-white rounded-lg shadow-lg overflow-hidden">
        <div className="p-8">
          <h2 className="text-2xl font-bold mb-4">Added Cars</h2>
          <div className="border-t border-gray-200">
            {/* Car 1 */}
            <div className="py-4">
              <h3 className="text-lg font-medium text-gray-800">Car 1</h3>
              <p className="text-gray-500">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus ut tempus ex, eget congue enim.</p>
            </div>
            {/* Car 2 */}
            <div className="py-4">
              <h3 className="text-lg font-medium text-gray-800">Car 2</h3>
              <p className="text-gray-500">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus ut tempus ex, eget congue enim.</p>
            </div>
            {/* Car 3 */}
            <div className="py-4">
              <h3 className="text-lg font-medium text-gray-800">Car 3</h3>
              <p className="text-gray-500">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus ut tempus ex, eget congue enim.</p>
            </div>
            {/* Add more cars */}
            <div className="py-4">
              <button
                type="button"
                className="inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              >
                Add More Cars
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProfilePage;























import React, { useEffect, useState } from 'react';
import axios from '../../axios';
import { useTable, usePagination, useGlobalFilter } from 'react-table';
// import 'react-table/css/styles.css';



const UserTable = () => {
  const [users, setUsers] = useState([]);
  const [selectedUserId, setSelectedUserId] = useState(null);
  const [isBanModalOpen, setIsBanModalOpen] = useState(false);
  const [isUnbanModalOpen, setIsUnbanModalOpen] = useState(false);

  const fetchUserList = async () => {
    try {
      const response = await axios.get('/admin/userList');
      if (!response.data.err) { 
        setUsers(response.data.data);
      }
    } catch (error) {
      console.log(error); 
    }
  };

  useEffect(() => {
    fetchUserList();
  }, []);

  const handleBanUser = (userId) => {
    setSelectedUserId(userId);
    setIsBanModalOpen(true);
  };

  const handleUnBanUser = (userId) => {
    setSelectedUserId(userId);
    setIsUnbanModalOpen(true);
  };

  const confirmBanUser = async () => {
    try {
      const response = await axios.put(`/admin/userList/${selectedUserId}`, {
        ban: true,
      });
      if (response.data.success) {
        setUsers((prevUsers) =>
          prevUsers.map((user) =>
            user._id === selectedUserId ? { ...user, ban: true } : user
          )
        );
      }
    } catch (error) {
      console.log(error);
    }
    setIsBanModalOpen(false);
  };

  const confirmUnbanUser = async () => {
    try {
      const response = await axios.put(
        `/admin/userList/unban/${selectedUserId}`,
        {
          ban: false,
        }
      );
      if (response.data.success) {
        setUsers((prevUsers) =>
          prevUsers.map((user) =>
            user._id === selectedUserId ? { ...user, ban: false } : user
          )
        );
      }
    } catch (error) {
      console.log(error);
    }
    setIsUnbanModalOpen(false);
  };

  // Define columns for the table
  const columns = React.useMemo(
    () => [
      {
        Header: 'No',
        accessor: (row, index) => index + 1,
      },
      {
        Header: 'User name',
        accessor: 'name',
      },
      {
        Header: 'Email',
        accessor: 'email',
      },
      {
        Header: 'Banned Status',
        accessor: 'ban',
        Cell: ({ value }) => (value ? 'Banned' : 'Active'),
      },
      {
        Header: 'Action',
        Cell: ({ row }) =>
          row.original.ban ? (
            <button
              className="text-red-500 bg-transparent border border-red-500 rounded-md px-3 py-2 hover:bg-red-500 hover:text-white transition-colors duration-300"
              onClick={() => handleUnBanUser(row.original._id)}
            >
              Unban User
            </button>
          ) : (
            <button
              className="text-green-500 bg-transparent border border-green-500 rounded-md px-3 py-2 hover:bg-green-500 hover:text-white transition-colors duration-300"
              onClick={() => handleBanUser(row.original._id)}
            >
              Ban User
            </button>
          ),
      },
    ],
    []
  );

  // Create a table instance with pagination and search functionality
  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    page,
    nextPage,
    previousPage,
    canNextPage,
    canPreviousPage,
    pageOptions,
    state,
    setGlobalFilter,
    prepareRow,
  } = useTable(
    {
      columns,
      data: users,
      initialState: { pageIndex: 0 },
    },
    useGlobalFilter,
    usePagination
  );

  const { globalFilter, pageIndex } = state;

  return (
    <div>
      <div
        className="relative overflow-x-auto"
        style={{ marginTop: '100px', marginRight: '100px' }}
      >
        <div>
          <input
            type="text"
            value={globalFilter || ''}
            onChange={(e) => setGlobalFilter(e.target.value)}
            placeholder="Search..."
            className="mb-4 px-3 py-2 border border-gray-300 rounded-md"
          />
        </div>
        <table
          {...getTableProps()}
          className="w-full text-sm text-left text-gray-500 dark:text-gray-400"
          style={{ marginTop: '100px' }}
        >
          <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
            {headerGroups.map((headerGroup) => (
              <tr {...headerGroup.getHeaderGroupProps()}>
                {headerGroup.headers.map((column) => (
                  <th {...column.getHeaderProps()} scope="col" className="px-6 py-3">
                    {column.render('Header')}
                  </th>
                ))}
              </tr>
            ))}
          </thead>
          <tbody {...getTableBodyProps()}>
            {page.map((row) => {
              prepareRow(row);
              return (
                <tr
                  {...row.getRowProps()}
                  className="bg-white border-b dark:bg-gray-800 dark:border-gray-700"
                >
                  {row.cells.map((cell) => (
                    <td {...cell.getCellProps()} className="px-6 py-4">
                      {cell.render('Cell')}
                    </td>
                  ))}
                </tr>
              );
            })}
          </tbody>
        </table>
        <div className="flex justify-between mt-4">
          <button
            onClick={() => previousPage()}
            disabled={!canPreviousPage}
            className="px-3 py-2 border border-gray-300 rounded-md"
          >
            Previous
          </button>
          <div>
            Page{' '}
            <strong>
              {pageIndex + 1} of {pageOptions.length}
            </strong>
          </div>
          <button
            onClick={() => nextPage()}
            disabled={!canNextPage}
            className="px-3 py-2 border border-gray-300 rounded-md"
          >
            Next
          </button>
        </div>
      </div>
      {isBanModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center z-50">
          <div className="bg-white w-96 rounded shadow-lg p-6">
            <p className="mb-4">Are you sure you want to ban this user?</p>
            <div className="flex justify-end">
              <button
                className="text-red-500 bg-transparent border border-red-500 rounded-md px-3 py-2 hover:bg-red-500 hover:text-white transition-colors duration-300 mr-2"
                onClick={() => setIsBanModalOpen(false)}
              >
                Cancel
              </button>
              <button
                className="text-white bg-red-500 rounded-md px-3 py-2 hover:bg-red-600 transition-colors duration-300"
                onClick={confirmBanUser}
              >
                YES
              </button>
            </div>
          </div>
        </div>
      )}
      {isUnbanModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center z-50">
          <div className="bg-white w-96 rounded shadow-lg p-6">
            <p className="mb-4">Are you sure you want to unban this user?</p>
            <div className="flex justify-end">
              <button
                className="text-gray-500 bg-transparent border border-gray-500 rounded-md px-3 py-2 hover:bg-gray-500 hover:text-white transition-colors duration-300 mr-2"
                onClick={() => setIsUnbanModalOpen(false)}
              >
                Cancel
              </button>
              <button
                className="text-white bg-green-500 rounded-md px-3 py-2 hover:bg-green-600 transition-colors duration-300"
                onClick={confirmUnbanUser}
              >
                YES
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default UserTable;
















        // toast.success("success" ,{
        //   position: "top-center"
        // })





// import React, { useEffect, useState } from 'react';
// import axios from '../../axios';

// const UserTable = () => {
//   const [users, setUsers] = useState([]);
//   const [selectedUserId, setSelectedUserId] = useState(null);
//   const [isBanModalOpen, setIsBanModalOpen] = useState(false);
//   const [isUnbanModalOpen, setIsUnbanModalOpen] = useState(false);

//   const fetchUserList = async () => {
//     try {
//       const response = await axios.get('/admin/userList');
//       if (!response.data.err) {
//         setUsers(response.data.data);
//       }
//     } catch (error) {
//       console.log(error);
//     }
//   };

//   useEffect(() => {
//     fetchUserList();
//   }, []);

//   const handleBanUser = (userId) => {
//     setSelectedUserId(userId);
//     setIsBanModalOpen(true);
//   };

//   const handleUnBanUser = (userId) => {
//     setSelectedUserId(userId);
//     setIsUnbanModalOpen(true);
//   };

//   const confirmBanUser = async () => {
//     try {
//       const response = await axios.put(`/admin/userList/${selectedUserId}`, {
//         ban: true,
//       });
//       if (response.data.success) {
//         setUsers((prevUsers) =>
//           prevUsers.map((user) =>
//             user._id === selectedUserId ? { ...user, ban: true } : user
//           )
//         );
//       }
//     } catch (error) {
//       console.log(error);
//     }
//     setIsBanModalOpen(false);
//   };

//   const confirmUnbanUser = async () => {
//     try {
//       const response = await axios.put(`/admin/userList/unban/${selectedUserId}`, {
//         ban: false,
//       });
//       if (response.data.success) {
//         setUsers((prevUsers) =>
//           prevUsers.map((user) =>
//             user._id === selectedUserId ? { ...user, ban: false } : user
//           )
//         );
//       }
//     } catch (error) {
//       console.log(error);
//     }
//     setIsUnbanModalOpen(false);
//   };

//   return (
//     <div>
//       <div className="relative overflow-x-auto" style={{ marginTop: '100px', marginRight: '100px' }}>
//         <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400" style={{ marginTop: '100px' }}>
//           <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
//             <tr>
//               <th scope="col" className="px-6 py-3">
//                 No
//               </th>
//               <th scope="col" className="px-6 py-3">
//                 User name
//               </th>
//               <th scope="col" className="px-6 py-3">
//                 Email
//               </th>
//               <th scope="col" className="px-6 py-3">
//                 Banned Status
//               </th>
//               <th scope="col" className="px-6 py-3">
//                 Action
//               </th>
//             </tr>
//           </thead>
//           <tbody>
//             {users.map((user, index) => (
//               <tr className="bg-white border-b dark:bg-gray-800 dark:border-gray-700" key={index}>
//                 <td className="px-6 py-4">{index + 1}</td>
//                 <td className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
//                   {user.name}
//                 </td>
//                 <td className="px-6 py-4">{user.email}</td>
//                 {user.ban ? (
//                   <td className="px-6 py-4 text-red-700">Banned</td>
//                 ) : (
//                   <td className="px-6 py-4 text-green-700">Active</td>
//                 )}
//                 <td>
//                   {user.ban ? (
//                     <button
//                       className="text-red-500 bg-transparent border border-red-500 rounded-md px-3 py-2 hover:bg-red-500 hover:text-white transition-colors duration-300"
//                       onClick={() => handleUnBanUser(user._id)}
//                     >
//                       Unban User
//                     </button>
//                   ) : (
//                     <button
//                       className="text-green-500 bg-transparent border border-green-500 rounded-md px-3 py-2 hover:bg-green-500 hover:text-white transition-colors duration-300"
//                       onClick={() => handleBanUser(user._id)}
//                     >
//                       Ban User
//                     </button>
//                   )}
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       </div>
//       {isBanModalOpen && (
//         <div className="fixed inset-0 flex items-center justify-center z-50">
//           <div className="bg-white w-96 rounded shadow-lg p-6">
//             <p className="mb-4">Are you sure you want to ban this user?</p>
//             <div className="flex justify-end">
//               <button
//                 className="text-red-500 bg-transparent border border-red-500 rounded-md px-3 py-2 hover:bg-red-500 hover:text-white transition-colors duration-300 mr-2"
//                 onClick={() => setIsBanModalOpen(false)}
//               >
//                 Cancel
//               </button>
//               <button
//                 className="text-white bg-red-500 rounded-md px-3 py-2 hover:bg-red-600 transition-colors duration-300"
//                 onClick={confirmBanUser}
//               >
//                 YES
//               </button>
//             </div>
//           </div>
//         </div> 
//       )}
//       {isUnbanModalOpen && (
//         <div className="fixed inset-0 flex items-center justify-center z-50">
//           <div className="bg-white w-96 rounded shadow-lg p-6">
//             <p className="mb-4">Are you sure you want to unban this user?</p>
//             <div className="flex justify-end">
//               <button
//                 className="text-gray-500 bg-transparent border border-gray-500 rounded-md px-3 py-2 hover:bg-gray-500 hover:text-white transition-colors duration-300 mr-2"
//                 onClick={() => setIsUnbanModalOpen(false)}
//               >
//                 Cancel
//               </button>
//               <button
//                 className="text-white bg-green-500 rounded-md px-3 py-2 hover:bg-green-600 transition-colors duration-300"
//                 onClick={confirmUnbanUser}
//               >
//                 YES
//               </button>
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default UserTable;




// import React, { useEffect, useState } from 'react';
// import axios from '../../axios';
// import DataTable from 'react-data-table-component';

// const UserTable = () => {
//   const [users, setUsers] = useState([]);
//   const [selectedUserId, setSelectedUserId] = useState(null);
//   const [isBanModalOpen, setIsBanModalOpen] = useState(false);
//   const [isUnbanModalOpen, setIsUnbanModalOpen] = useState(false);

//   const fetchUserList = async () => {
//     try {
//       const response = await axios.get('/admin/userList');
//       if (!response.data.err) {
//         setUsers(response.data.data);
//       }
//     } catch (error) {
//       console.log(error);
//     }
//   };

//   useEffect(() => {
//     fetchUserList();
//   }, []);

//   const handleBanUser = (userId) => {
//     setSelectedUserId(userId);
//     setIsBanModalOpen(true);
//   };

//   const handleUnBanUser = (userId) => {
//     setSelectedUserId(userId);
//     setIsUnbanModalOpen(true);
//   };

//   const confirmBanUser = async () => {
//     try {
//       const response = await axios.put(`/admin/userList/${selectedUserId}`, {
//         ban: true,
//       });
//       if (response.data.success) {
//         setUsers((prevUsers) =>
//           prevUsers.map((user) =>
//             user._id === selectedUserId ? { ...user, ban: true } : user
//           )
//         );
//       }
//     } catch (error) {
//       console.log(error);
//     }
//     setIsBanModalOpen(false);
//   };

//   const confirmUnbanUser = async () => {
//     try {
//       const response = await axios.put(`/admin/userList/unban/${selectedUserId}`, {
//         ban: false,
//       });
//       if (response.data.success) {
//         setUsers((prevUsers) =>
//           prevUsers.map((user) =>
//             user._id === selectedUserId ? { ...user, ban: false } : user
//           )
//         );
//       }
//     } catch (error) {
//       console.log(error);
//     }
//     setIsUnbanModalOpen(false);
//   };

//   const columns = [
//     {
//       name: 'No',
//       selector: (row, index) => index + 1,
//       sortable: true,
//     },
//     {
//       name: 'User name',
//       selector: 'name',
//       sortable: true,
//     },
//     {
//       name: 'Email',
//       selector: 'email',
//       sortable: true,
//     },
//     {
//       name: 'Banned Status',
//       cell: (row) => (row.ban ? 'Banned' : 'Active'),
//       sortable: true,
//     },
//     {
//       name: 'Action',
//       cell: (row) => (
//         <>
//           {row.ban ? (
//             <button
//               className="text-red-500 bg-transparent border border-red-500 rounded-md px-3 py-2 hover:bg-red-500 hover:text-white transition-colors duration-300"
//               onClick={() => handleUnBanUser(row._id)}
//             >
//               Unban User
//             </button>
//           ) : (
//             <button
//               className="text-green-500 bg-transparent border border-green-500 rounded-md px-3 py-2 hover:bg-green-500 hover:text-white transition-colors duration-300"
//               onClick={() => handleBanUser(row._id)}
//             >
//               Ban User
//             </button>
//           )}
//         </>
//       ),
//     },
//   ];

//   return (
//     <div>
//       <DataTable
//         columns={columns}
//         data={users}
//         pagination
//         highlightOnHover
//         noHeader
//         striped
//         dense
//       />
//       {isBanModalOpen && (
//         <div className="fixed inset-0 flex items-center justify-center z-50">
//           <div className="bg-white w-96 rounded shadow-lg p-6">
//             <p className="mb-4">Are you sure you want to ban this user?</p>
//             <div className="flex justify-end">
//               <button
//                 className="text-red-500 bg-transparent border border-red-500 rounded-md px-3 py-2 hover:bg-red-500 hover:text-white transition-colors duration-300 mr-2"
//                 onClick={() => setIsBanModalOpen(false)}
//               >
//                 Cancel
//               </button>
//               <button
//                 className="text-white bg-red-500 rounded-md px-3 py-2 hover:bg-red-600 transition-colors duration-300"
//                 onClick={confirmBanUser}
//               >
//                 YES
//               </button>
//             </div>
//           </div>
//         </div>
//       )}
//       {isUnbanModalOpen && (
//         <div className="fixed inset-0 flex items-center justify-center z-50">
//           <div className="bg-white w-96 rounded shadow-lg p-6">
//             <p className="mb-4">Are you sure you want to unban this user?</p>
//             <div className="flex justify-end">
//               <button
//                 className="text-gray-500 bg-transparent border border-gray-500 rounded-md px-3 py-2 hover:bg-gray-500 hover:text-white transition-colors duration-300 mr-2"
//                 onClick={() => setIsUnbanModalOpen(false)}
//               >
//                 Cancel
//               </button>
//               <button
//                 className="text-white bg-green-500 rounded-md px-3 py-2 hover:bg-green-600 transition-colors duration-300"
//                 onClick={confirmUnbanUser}
//               >
//                 YES
//               </button>
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default UserTable;






import React, { useEffect, useState } from 'react';
import axios from '../../axios';
import DataTable from 'react-data-table-component';

const UserTable = () => {
  const [users, setUsers] = useState([]);
  const [selectedUserId, setSelectedUserId] = useState(null);
  const [isBanModalOpen, setIsBanModalOpen] = useState(false);
  const [isUnbanModalOpen, setIsUnbanModalOpen] = useState(false);
  const [searchText, setSearchText] = useState('');

  const fetchUserList = async () => {
    try {
      const response = await axios.get('/admin/userList');
      if (!response.data.err) {
        setUsers(response.data.data);
      }
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    fetchUserList();
  }, []);

  const handleBanUser = (userId) => {
    setSelectedUserId(userId);
    setIsBanModalOpen(true);
  };

  const handleUnBanUser = (userId) => {
    setSelectedUserId(userId);
    setIsUnbanModalOpen(true);
  };

  const confirmBanUser = async () => {
    try {
      const response = await axios.put(`/admin/userList/${selectedUserId}`, {
        ban: true,
      });
      if (response.data.success) {
        setUsers((prevUsers) =>
          prevUsers.map((user) =>
            user._id === selectedUserId ? { ...user, ban: true } : user
          )
        );
      }
    } catch (error) {
      console.log(error);
    }
    setIsBanModalOpen(false);
  };

  const confirmUnbanUser = async () => {
    try {
      const response = await axios.put(`/admin/userList/unban/${selectedUserId}`, {
        ban: false,
      });
      if (response.data.success) {
        setUsers((prevUsers) =>
          prevUsers.map((user) =>
            user._id === selectedUserId ? { ...user, ban: false } : user
          )
        );
      }
    } catch (error) {
      console.log(error);
    }
    setIsUnbanModalOpen(false);
  };

  const columns = [
    {
      name: 'No',
      selector: (row, index) => index + 1,
      sortable: true,
      style: {
        paddingLeft: '16px',
      },
    },
    {
      name: 'User name',
      selector: 'name',
      sortable: true,
    },
    {
      name: 'Email',
      selector: 'email',
      sortable: true,
    },
    {
      name: 'Banned Status',
      cell: (row) => (row.ban ? 'Banned' : 'Active'),
      sortable: true,
    },
    {
      name: 'Action',
      cell: (row) => (
        <>
          {row.ban ? (
            <button
              className="text-red-500 bg-transparent border border-red-500 rounded-md px-3 py-2 hover:bg-red-500 hover:text-white transition-colors duration-300"
              onClick={() => handleUnBanUser(row._id)}
            >
              Unban User
            </button>
          ) : (
            <button
              className="text-green-500 bg-transparent border border-green-500 rounded-md px-3 py-2 hover:bg-green-500 hover:text-white transition-colors duration-300"
              onClick={() => handleBanUser(row._id)}
            >
              Ban User
            </button>
          )}
        </>
      ),
    },
  ];

  return (
    <div className="  rounded-md"   style={{paddingRight:'300px',paddingTop:'200px'}}
    >
      <div className="mb-4" >
        <input
          type="text"
          placeholder="Search by name"
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
          className="border border-gray-300 rounded-md px-3 py-2"
        />
      </div>
      <DataTable
        columns={columns}
        data={users.filter((user) =>
          user.name.toLowerCase().includes(searchText.toLowerCase())
        )}
        pagination
        highlightOnHover
        noHeader
        striped
        responsive
        customStyles={{
          table: {
            marginBottom: 0,
          },
          header: {
            fontSize: '1rem',
            fontWeight: 'bold',
            backgroundColor: '#F3F4F6',
            color: '#111827',
            paddingTop: '12px',
            paddingBottom: '12px',
          },
          rows: {
            style: {
              minHeight: '56px', // Adjust the row height as needed
            },
          },
        }}
      />
      {isBanModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center z-50">
          <div className="bg-white w-96 rounded shadow-lg p-6">
            <p className="mb-4">Are you sure you want to ban this user?</p>
            <div className="flex justify-end">
              <button
                className="text-red-500 bg-transparent border border-red-500 rounded-md px-3 py-2 hover:bg-red-500 hover:text-white transition-colors duration-300 mr-2"
                onClick={() => setIsBanModalOpen(false)}
              >
                Cancel
              </button>
              <button
                className="text-white bg-red-500 rounded-md px-3 py-2 hover:bg-red-600 transition-colors duration-300"
                onClick={confirmBanUser}
              >
                YES
              </button>
            </div>
          </div>
        </div>
      )}
      {isUnbanModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center z-50">
          <div className="bg-white w-96 rounded shadow-lg p-6">
            <p className="mb-4">Are you sure you want to unban this user?</p>
            <div className="flex justify-end">
              <button
                className="text-gray-500 bg-transparent border border-gray-500 rounded-md px-3 py-2 hover:bg-gray-500 hover:text-white transition-colors duration-300 mr-2"
                onClick={() => setIsUnbanModalOpen(false)}
              >
                Cancel
              </button>
              <button
                className="text-white bg-green-500 rounded-md px-3 py-2 hover:bg-green-600 transition-colors duration-300"
                onClick={confirmUnbanUser}
              >
                YES
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default UserTable;












// import React, { useEffect, useState } from 'react';
// import axios from '../../axios';

// const VendorTable = () => {
//   const [vendors, setVendors] = useState([]);
//   const [selectedVendor, setSelectedVendor] = useState(null);
//   const [isBanModalOpen, setIsBanModalOpen] = useState(false);
//   const [isUnbanModalOpen, setIsUnbanModalOpen] = useState(false);

//   const fetchVendorList = async () => {
//     try {
//       const response = await axios.get('/admin/vendorList');
//       if (!response.data.err) {
//         setVendors(response.data.data);
//       }
//     } catch (error) {
//       console.log(error);
//     }
//   };

//   useEffect(() => {
//     fetchVendorList();
//   }, []);

//   const handleBanVendor = (vendorId) => {
//     setSelectedVendor(vendorId);
//     setIsBanModalOpen(true);
//   };

//   const handleUnBanVendor = (vendorId) => {
//     setSelectedVendor(vendorId);
//     setIsUnbanModalOpen(true);
//   };

//   const confirmBanAction = async () => {
//     try {
//       if (selectedVendor) {
//         const response = await axios.put(`/admin/vendorList/${selectedVendor}`, {
//           ban: true,
//         });
//         if (response.data.success) {
//           setVendors((prevVendors) =>
//             prevVendors.map((vendor) =>
//               vendor._id === selectedVendor ? { ...vendor, ban: true } : vendor
//             )
//           );
//         }
//       }
//     } catch (error) {
//       console.log(error);
//     }
//     setIsBanModalOpen(false);
//     setSelectedVendor(null);
//   };

//   const confirmUnbanAction = async () => {
//     try {
//       if (selectedVendor) {
//         const response = await axios.put(`/admin/vendorList/unban/${selectedVendor}`, {
//           ban: false,
//         });
//         if (response.data.success) {
//           setVendors((prevVendors) =>
//             prevVendors.map((vendor) =>
//               vendor._id === selectedVendor ? { ...vendor, ban: false } : vendor
//             )
//           );
//         }
//       }
//     } catch (error) {
//       console.log(error);
//     }
//     setIsUnbanModalOpen(false);
//     setSelectedVendor(null);
//   };

//   const cancelAction = () => {
//     setIsBanModalOpen(false);
//     setIsUnbanModalOpen(false);
//     setSelectedVendor(null);
//   };

//   return (
//     <div>
//       <div className="relative overflow-x-auto" style={{ marginTop: '100px', marginRight: '100px' }}>
//         <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400" style={{ marginTop: '100px' }}>
//           <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
//             <tr>
//               <th scope="col" className="px-6 py-3">
//                 No
//               </th>
//               <th scope="col" className="px-6 py-3">
//                 Vendor name
//               </th>
//               <th scope="col" className="px-6 py-3">
//                 Email
//               </th>
//               <th scope="col" className="px-6 py-3">
//                 Phone Number
//               </th>
//               <th scope="col" className="px-6 py-3">
//                 Banned Status
//               </th>
//               <th scope="col" className="px-6 py-3">
//                 Action
//               </th>
//             </tr>
//           </thead>
//           <tbody>
//             {vendors.map((vendor, index) => (
//               <tr className="bg-white border-b dark:bg-gray-800 dark:border-gray-700" key={index}>
//                 <td className="px-6 py-4">{index + 1}</td>
//                 <td className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
//                   {vendor.name}
//                 </td>
//                 <td className="px-6 py-4">{vendor.email}</td>
//                 <td className="px-6 py-4">{vendor.phoneNumber}</td>
//                 {vendor.ban ? (
//                   <td className="px-6 py-4 text-red-700">Banned</td>
//                 ) : (
//                   <td className="px-6 py-4 text-green-700">Active</td>
//                 )}
//                 <td>
//                   {vendor.ban ? (
//                     <button
//                       className="text-red-500 bg-transparent border border-red-500 rounded-md px-3 py-2 hover:bg-red-500 hover:text-white transition-colors duration-300"
//                       onClick={() => handleUnBanVendor(vendor._id)}
//                     >
//                       Unban Vendor
//                     </button>
//                   ) : (
//                     <button
//                       className="text-green-500 bg-transparent border border-green-500 rounded-md px-3 py-2 hover:bg-green-500 hover:text-white transition-colors duration-300"
//                       onClick={() => handleBanVendor(vendor._id)}
//                     >
//                       Ban Vendor
//                     </button>
//                   )}
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       </div>

//       {isBanModalOpen && (
//         <div className="fixed inset-0 flex items-center justify-center z-50">
//           <div className="bg-white w-1/3 p-6 rounded-md shadow-lg">
//             <p className="text-lg font-semibold mb-4">Confirm Ban</p>
//             <p className="text-gray-700 mb-8">
//               Are you sure you want to ban this vendor?
//             </p>
//             <div className="flex justify-end">
//               <button
//                 className="px-4 py-2 bg-red-500 text-white rounded-md mr-2 hover:bg-red-600 transition-colors duration-300"
//                 onClick={confirmBanAction}
//               >
//                 Yes
//               </button>
//               <button
//                 className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors duration-300"
//                 onClick={cancelAction}
//               >
//                 Cancel
//               </button>
//             </div>
//           </div>
//         </div>
//       )}

//       {isUnbanModalOpen && (
//         <div className="fixed inset-0 flex items-center justify-center z-50">
//           <div className="bg-white w-1/3 p-6 rounded-md shadow-lg">
//             <p className="text-lg font-semibold mb-4">Confirm Unban</p>
//             <p className="text-gray-700 mb-8">
//               Are you sure you want to unban this vendor?
//             </p>
//             <div className="flex justify-end">
//               <button
//                 className="px-4 py-2 bg-red-500 text-white rounded-md mr-2 hover:bg-red-600 transition-colors duration-300"
//                 onClick={confirmUnbanAction}
//               >
//                 Yes
//               </button>
//               <button
//                 className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors duration-300"
//                 onClick={cancelAction}
//               >
//                 Cancel
//               </button>
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default VendorTable;








        // MdDashboard
        import React, { useState } from "react";
import { HiMenuAlt3 } from "react-icons/hi";
import { MdOutlineDashboard } from "react-icons/md";
import { RiSettings4Line } from "react-icons/ri";
import { TbReportAnalytics } from "react-icons/tb";
import { AiOutlineUser, AiOutlineHeart } from "react-icons/ai";
import { FiMessageSquare, FiFolder, FiShoppingCart } from "react-icons/fi";
import { Link } from "react-router-dom";
import ProfilePage from './src/components/Vendor/Profile';

const Home = () => {
  const menus = [
    { name: "dashboard", link: "/", icon: MdOutlineDashboard },
    { name: "user", link: "/", icon: AiOutlineUser },
    { name: "messages", link: "/", icon: FiMessageSquare },
    { name: "analytics", link: "/", icon: TbReportAnalytics, margin: true },
    { name: "File Manager", link: "/", icon: FiFolder },
    { name: "Cart", link: "/", icon: FiShoppingCart },
    { name: "Saved", link: "/", icon: AiOutlineHeart, margin: true },
    { name: "Setting", link: "/", icon: RiSettings4Line },
  ];
  const [open, setOpen] = useState(true);
  return (
    <section className="flex gap-6">
      <div
        className={`bg-[#0e0e0e] min-h-screen ${
          open ? "w-72" : "w-16"
        } duration-500 text-gray-100 px-4`} style={{backgroundColor:'black'}}
      >
        <div className="py-3 flex justify-end">
          <HiMenuAlt3
            size={26}
            className="cursor-pointer"
            onClick={() => setOpen(!open)}
          />
        </div>
        <div className="mt-4 flex flex-col gap-4 relative">
          {menus?.map((menu, i) => (
            <Link
              to={menu?.link}
              key={i}
              className={` ${
                menu?.margin && "mt-5"
              } group flex items-center text-sm  gap-3.5 font-medium p-2 hover:bg-gray-800 rounded-md`}
            >
              <div>{React.createElement(menu?.icon, { size: "20" })}</div>
              <h2
                style={{
                  transitionDelay: `${i + 3}00ms`,
                }}
                className={`whitespace-pre duration-500 ${
                  !open && "opacity-0 translate-x-28 overflow-hidden"
                }`}
              >
                {menu?.name}
              </h2>
              <h2
                className={`${
                  open && "hidden"
                } absolute left-48 bg-white font-semibold whitespace-pre text-gray-900 rounded-md drop-shadow-lg px-0 py-0 w-0 overflow-hidden group-hover:px-2 group-hover:py-1 group-hover:left-14 group-hover:duration-300 group-hover:w-fit  `}
              >
                {menu?.name}
              </h2>
            </Link>
          ))}
        </div>
      </div>
      <div className="m-3 text-xl text-gray-900 font-semibold">
        REACT TAILWIND
      </div>
    </section>
  );
};

export default Home;

// <button
                    //   className="text-blue-500 underline"
                    //   onClick={() => handleBanUser(user._id)}
                    // >
                    //   Ban User
                    // </button>



                    // import React, { useEffect ,useState} from 'react';
// import axios from '../../axios';


// const ProductTable = () => {
//   const [users, setUsers] = useState([]);
  
//   useEffect(() => {
//     axios.get('/admin/userList').then((response)=>{
//       console.log(response.data);
//       if (!response.data.err) {
//         console.log(response.data);
//         setUsers(response.data.data)
//       }
//     })
//   }, [])
//   const handleBanUser = async (userId) => {
//     console.log(userId );
//   try {
    
//     const response = await axios.put(`/admin/userList/${userId}`, {
//       ban: true,
//     });
//     if (response.data.success) {
//       // Update the user's ban status locally in the state
//       setUsers((prevUsers) =>
//         prevUsers.map((user) =>
//           user.id === userId ? { ...user, ban: true } : user
//         )
//       );
//     }
//   } catch (error) {
//     console.log(error);
//   }
// };
// const handleunBanUser = async (userId) => {
//   console.log(userId );
// try {
//   const response = await axios.put(`/admin/userList/unban/${userId}`, {
//     ban: true,
//   });
//   if (response.data.success) {
//     // Update the user's ban status locally in the state
//     setUsers((prevUsers) =>
//       prevUsers.map((user) =>
//         user.id === userId ? { ...user, ban: false } : user
//       )
//     );
//   }
// } catch (error) {
//   console.log(error);
// }
// };


//   return (
//     <div>
// <div class="relative overflow-x-auto" style={{marginTop:'100px',marginRight:'100px'}}>
//     <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400" style={{marginTop:'100px' }}>
//         <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
//             <tr>
//             <th scope="col" class="px-6 py-3">
//                     No
//                 </th>
//                 <th scope="col" class="px-6 py-3">
//                     User name
//                 </th>
//                 <th scope="col" class="px-6 py-3">
//                     Email
//                 </th>
//                 <th scope="col" class="px-6 py-3">
//                     Banned Status
//                 </th>
//                 <th scope="col" class="px-6 py-3">
//                     Action
//                 </th>
//             </tr>
//         </thead>
//         <tbody>
//         {users.map((user,index) => (
//             <tr className="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
//               <td key={index}  className="px-6 py-4">
//                     {index+1}
//                 </td>
//                 <th scope="row" key={index} className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
//                     {user.name}
//                 </th>
//                 <td key={index}  className="px-6 py-4">
//                     {user.email}
//                 </td>
//                 { user.ban ?
//                 <td key={index}  className="px-6 py-4 text-red-700 ">
//                     Banned
//                 </td> 
//                 : 
//                 <td key={index}  className="px-6 py-4 text-green-700 ">
//                   Active
//             </td>

//                 }

//               <td>
//                  {user.ban ? (
//                     <button
//   className="text-red-500  bg-transparent border border-red-500 rounded-md px-3 py-2 hover:bg-red-500 hover:text-white transition-colors duration-300"
//   onClick={() => handleunBanUser(user._id)}
// >
//   UnBan User
// </button>

//                   ) : (
                    
//                     <button
//                     className="text-green-500  bg-transparent border border-green-500 rounded-md px-3 py-2 hover:bg-green-500 hover:text-white transition-colors duration-300"
//                     onClick={() => handleBanUser(user._id)}
//                   >
//                     Ban User
//                   </button>     
//                   )} </td>  
//             </tr>
//              ))}
//         </tbody>
//     </table>
// </div>

//     </div>
//   );
// };

// export default ProductTable;



// import React, { useEffect, useState } from "react";
// import axios from "../../axios";

// const VendorTable = () => {
//   const [vendor, setVendor] = useState([]);

//   // useEffect(() => {
//   //   axios.get("/admin/vendorList").then((response) => {
//   //     console.log(response.data);
//   //     if (!response.data.err) {
//   //       console.log(response.data);
//   //       setVendor(response.data.data);
//   //     }
//   //   });
//   // }, []);
//   const fetchVendorList = async () => {
//     try {
//       const response = await axios.get('/admin/vendorList');
//       if (!response.data.err) {
//         setVendor(response.data.data);
//       }
//     } catch (error) {
//       console.log(error);
//     }
//   };

//   useEffect(() => {
//     fetchVendorList();
//   }, []);

//   const handleBanVendor = async (vendorId) => {
//     console.log("vendorrrr idddddddddddd", vendorId);
//     try {
//       const response = await axios.put(`/admin/vendorList/${vendorId}`, {
//         ban: true,
//       });
//       if (response.data.success) {
//         setVendor((prevVendor) =>
//           prevVendor.map((vendor) =>
//             vendor.id === vendorId ? { ...vendor, ban: true } : vendor
//           )
//         );
//       }
//     } catch (error) {
//       console.log(error);
//     }
//   };
//   const handleunBanVendor = async (vendorId) => {
//     console.log("vendorrrr idddddddddddd", vendorId);
//     try {
//       const response = await axios.put(`/admin/vendorList/unban/${vendorId}`, {
//         ban: true,
//       });
//       if (response.data.success) {
//         setVendor((prevvendor) =>
//           prevvendor.map((vendor) =>
//             vendor.id === vendorId ? { ...vendor, ban: false } : vendor
//           )
//         );
//       }
//     } catch (error) {
//       console.log(error);
//     }
//   };

//   return (
//     <div>
//       <div
//         class="relative overflow-x-auto"
//         style={{ marginTop: "100px", marginRight: "100px" }}
//       >
//         <table
//           class="w-full text-sm text-left text-gray-500 dark:text-gray-400"
//           style={{ marginTop: "100px" }}
//         >
//           <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
//             <tr>
//               <th scope="col" class="px-6 py-3">
//                 No
//               </th>
//               <th scope="col" class="px-6 py-3">
//                 Vendor name
//               </th>
//               <th scope="col" class="px-6 py-3">
//                 Email
//               </th>
//               <th scope="col" class="px-6 py-3">
//                 Phone Number
//               </th>
//               <th scope="col" class="px-6 py-3">
//                 Banned Status
//               </th>
//               <th scope="col" class="px-6 py-3">
//                 Action
//               </th>
//             </tr>
//           </thead>
//           <tbody>
//             {vendor.map((user, index) => (
//               <tr className="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
//                 <td key={index} className="px-6 py-4">
//                   {index + 1}
//                 </td>
//                 <th
//                   scope="row"
//                   key={index}
//                   className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white"
//                 >
//                   {user.name}
//                 </th>
//                 <td key={index} className="px-6 py-4">
//                   {user.email}
//                 </td>
//                 <td key={index} className="px-6 py-4">
//                   {user.phoneNumber}
//                 </td>
//                 {user.ban ? (
//                   <td key={index} className="px-6 py-4 text-red-700 ">
//                     Banned
//                   </td>
//                 ) : (
//                   <td key={index} className="px-6 py-4 text-green-700 ">
//                     Active
//                   </td>
//                 )}

//                 <td>
//                   {user.ban ? (
//                     <button
//                       className="text-red-500  bg-transparent border border-red-500 rounded-md px-3 py-2 hover:bg-red-500 hover:text-white transition-colors duration-300"
//                       onClick={() => handleunBanVendor(user._id)}
//                     >
//                       UnBan vendor
//                     </button>
//                   ) : (
//                     <button
//                       className="text-green-500  bg-transparent border border-green-500 rounded-md px-3 py-2 hover:bg-green-500 hover:text-white transition-colors duration-300"
//                       onClick={() => handleBanVendor(user._id)}
//                     >
//                       Ban Vendor
//                     </button>
//                   )}{" "}
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       </div>
//     </div>
//   );
// };

// export default VendorTable;





// export default UserTable;
// import React, { useEffect, useState } from 'react';
// import axios from '../../axios';

// const UserTable = () => {
//   const [users, setUsers] = useState([]);
//   const [selectedUserId, setSelectedUserId] = useState(null);
//   const [isBanModalOpen, setIsBanModalOpen] = useState(false);
//   const [isUnbanModalOpen, setIsUnbanModalOpen] = useState(false);

//   const fetchUserList = async () => {
//     try {
//       const response = await axios.get('/admin/userList');
//       if (!response.data.err) {
//         setUsers(response.data.data);
//       }
//     } catch (error) {
//       console.log(error);
//     }
//   };

//   useEffect(() => {
//     fetchUserList();
//   }, []);

//   const handleBanUser = (userId) => {
//     setSelectedUserId(userId);
//     setIsBanModalOpen(true);
//   };

//   const handleUnBanUser = (userId) => {
//     setSelectedUserId(userId);
//     setIsUnbanModalOpen(true);
//   };

//   const confirmBanUser = async () => {
//     try {
//       const response = await axios.put(`/admin/userList/${selectedUserId}`, {
//         ban: true,
//       });
//       if (response.data.success) {
//         setUsers((prevUsers) =>
//           prevUsers.map((user) =>
//             user._id === selectedUserId ? { ...user, ban: true } : user
//           )
//         );
//       }
//     } catch (error) {
//       console.log(error);
//     }
//     setIsBanModalOpen(false);
//   };

//   const confirmUnbanUser = async () => {
//     try {
//       const response = await axios.put(`/admin/userList/unban/${selectedUserId}`, {
//         ban: false,
//       });
//       if (response.data.success) {
//         setUsers((prevUsers) =>
//           prevUsers.map((user) =>
//             user._id === selectedUserId ? { ...user, ban: false } : user
//           )
//         );
//       }
//     } catch (error) {
//       console.log(error);
//     }
//     setIsUnbanModalOpen(false);
//   };

//   return (
//     <div>
//       <div className="relative overflow-x-auto" style={{ marginTop: '100px', marginRight: '100px' }}>
//         <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400" style={{ marginTop: '100px' }}>
//           <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
//             <tr>
//               <th scope="col" className="px-6 py-3">
//                 No
//               </th>
//               <th scope="col" className="px-6 py-3">
//                 User name
//               </th>
//               <th scope="col" className="px-6 py-3">
//                 Email
//               </th>
//               <th scope="col" className="px-6 py-3">
//                 Banned Status
//               </th>
//               <th scope="col" className="px-6 py-3">
//                 Action
//               </th>
//             </tr>
//           </thead>
//           <tbody>
//             {users.map((user, index) => (
//               <tr className="bg-white border-b dark:bg-gray-800 dark:border-gray-700" key={index}>
//                 <td className="px-6 py-4">{index + 1}</td>
//                 <td className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
//                   {user.name}
//                 </td>
//                 <td className="px-6 py-4">{user.email}</td>
//                 {user.ban ? (
//                   <td className="px-6 py-4 text-red-700">Banned</td>
//                 ) : (
//                   <td className="px-6 py-4 text-green-700">Active</td>
//                 )}
//                 <td>
//                   {user.ban ? (
//                     <button
//                       className="text-red-500 bg-transparent border border-red-500 rounded-md px-3 py-2 hover:bg-red-500 hover:text-white transition-colors duration-300"
//                       onClick={() => handleUnBanUser(user._id)}
//                     >
//                       UnBan User
//                     </button>
//                   ) : (
//                     <button
//                       className="text-green-500 bg-transparent border border-green-500 rounded-md px-3 py-2 hover:bg-green-500 hover:text-white transition-colors duration-300"
//                       onClick={() => handleBanUser(user._id)}
//                     >
//                       Ban User
//                     </button>
//                   )}
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       </div>
//       {isBanModalOpen && (
//         <div className="fixed inset-0 flex items-center justify-center z-50">
//           <div className="bg-white w-96 rounded shadow-lg p-6">
//             <p>Are you sure you want to ban this user?</p>
//             <div className="flex justify-end mt-4">
//               <button
//                 className="text-red-500 bg-transparent border border-red-500 rounded-md px-3 py-2 hover:bg-red-500 hover:text-white transition-colors duration-300 mr-2"
//                 onClick={() => setIsBanModalOpen(false)}
//               >
//                 Cancel
//               </button>
//               <button
//                 className="text-white bg-red-500 rounded-md px-3 py-2 hover:bg-red-600 transition-colors duration-300"
//                 onClick={confirmBanUser}
//               >
//                 Ban User
//               </button>
//             </div>
//           </div>
//         </div>
//       )}
//       {isUnbanModalOpen && (
//         <div className="fixed inset-0 flex items-center justify-center z-50">
//           <div className="bg-white w-96 rounded shadow-lg p-6">
//             <p>Are you sure you want to unban this user?</p>
//             <div className="flex justify-end mt-4">
//               <button
//                 className="text-gray-500 bg-transparent border border-gray-500 rounded-md px-3 py-2 hover:bg-gray-500 hover:text-white transition-colors duration-300 mr-2"
//                 onClick={() => setIsUnbanModalOpen(false)}
//               >
//                 Cancel
//               </button>
//               <button
//                 className="text-white bg-gray-500 rounded-md px-3 py-2 hover:bg-gray-600 transition-colors duration-300"
//                 onClick={confirmUnbanUser}
//               >
//                 Unban User
//               </button>
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default UserTable;



import React, { useEffect, useState } from 'react';
import axios from '../../axios';

const VendorTable = () => {
  const [vendors, setVendors] = useState([]);

  const fetchVendorList = async () => {
    try {
      const response = await axios.get('/admin/vendorList');
      if (!response.data.err) {
        setVendors(response.data.data);
      }
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    fetchVendorList();
  }, []);

  const handleBanVendor = async (vendorId) => {
    try {
      const response = await axios.put(`/admin/vendorList/${vendorId}`, {
        ban: true,
      });
      if (response.data.success) {
        setVendors((prevVendors) =>
          prevVendors.map((vendor) =>
            vendor._id === vendorId ? { ...vendor, ban: true } : vendor
          )
        );
      }
    } catch (error) {
      console.log(error);
    }
  };

  const handleUnBanVendor = async (vendorId) => {
    try {
      const response = await axios.put(`/admin/vendorList/unban/${vendorId}`, {
        ban: false,
      });
      if (response.data.success) {
        setVendors((prevVendors) =>
          prevVendors.map((vendor) =>
            vendor._id === vendorId ? { ...vendor, ban: false } : vendor
          )
        );
      }
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <div>
      <div className="relative overflow-x-auto" style={{ marginTop: '100px', marginRight: '100px' }}>
        <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400" style={{ marginTop: '100px' }}>
          <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
            <tr>
              <th scope="col" className="px-6 py-3">
                No
              </th>
              <th scope="col" className="px-6 py-3">
                Vendor name
              </th>
              <th scope="col" className="px-6 py-3">
                Email
              </th>
              <th scope="col" className="px-6 py-3">
                Phone Number
              </th>
              <th scope="col" className="px-6 py-3">
                Banned Status
              </th>
              <th scope="col" className="px-6 py-3">
                Action
              </th>
            </tr>
          </thead>
          <tbody>
            {vendors.map((vendor, index) => (
              <tr className="bg-white border-b dark:bg-gray-800 dark:border-gray-700" key={index}>
                <td className="px-6 py-4">{index + 1}</td>
                <td className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                  {vendor.name}
                </td>
                <td className="px-6 py-4">{vendor.email}</td>
                <td className="px-6 py-4">{vendor.phoneNumber}</td>
                {vendor.ban ? (
                  <td className="px-6 py-4 text-red-700">Banned</td>
                ) : (
                  <td className="px-6 py-4 text-green-700">Active</td>
                )}
                <td>
                  {vendor.ban ? (
                    <button
                      className="text-red-500 bg-transparent border border-red-500 rounded-md px-3 py-2 hover:bg-red-500 hover:text-white transition-colors duration-300"
                      onClick={() => handleUnBanVendor(vendor._id)}
                    >
                      Unban Vendor
                    </button>
                  ) : (
                    <button
                      className="text-green-500 bg-transparent border border-green-500 rounded-md px-3 py-2 hover:bg-green-500 hover:text-white transition-colors duration-300"
                      onClick={() => handleBanVendor(vendor._id)}
                    >
                      Ban Vendor
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default VendorTable;